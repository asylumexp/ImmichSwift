//
// APIKeysAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class APIKeysAPI {

    /**

     - parameter aPIKeyCreateDto: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: APIKeyCreateResponseDto
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createApiKey(aPIKeyCreateDto: APIKeyCreateDto, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> APIKeyCreateResponseDto {
        return try await createApiKeyWithRequestBuilder(aPIKeyCreateDto: aPIKeyCreateDto, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /api-keys
     - API Key:
       - type: apiKey immich_access_token 
       - name: cookie
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: api_key
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter aPIKeyCreateDto: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<APIKeyCreateResponseDto> 
     */
    open class func createApiKeyWithRequestBuilder(aPIKeyCreateDto: APIKeyCreateDto, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<APIKeyCreateResponseDto> {
        let localVariablePath = "/api-keys"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aPIKeyCreateDto, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIKeyCreateResponseDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteApiKey(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await deleteApiKeyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /api-keys/{id}
     - API Key:
       - type: apiKey immich_access_token 
       - name: cookie
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: api_key
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteApiKeyWithRequestBuilder(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/api-keys/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: APIKeyResponseDto
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getApiKey(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> APIKeyResponseDto {
        return try await getApiKeyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api-keys/{id}
     - API Key:
       - type: apiKey immich_access_token 
       - name: cookie
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: api_key
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<APIKeyResponseDto> 
     */
    open class func getApiKeyWithRequestBuilder(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<APIKeyResponseDto> {
        var localVariablePath = "/api-keys/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIKeyResponseDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [APIKeyResponseDto]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getApiKeys(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> [APIKeyResponseDto] {
        return try await getApiKeysWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /api-keys
     - API Key:
       - type: apiKey immich_access_token 
       - name: cookie
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: api_key
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[APIKeyResponseDto]> 
     */
    open class func getApiKeysWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<[APIKeyResponseDto]> {
        let localVariablePath = "/api-keys"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[APIKeyResponseDto]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path)  
     - parameter aPIKeyUpdateDto: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: APIKeyResponseDto
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateApiKey(id: UUID, aPIKeyUpdateDto: APIKeyUpdateDto, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> APIKeyResponseDto {
        return try await updateApiKeyWithRequestBuilder(id: id, aPIKeyUpdateDto: aPIKeyUpdateDto, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /api-keys/{id}
     - API Key:
       - type: apiKey immich_access_token 
       - name: cookie
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: api_key
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter id: (path)  
     - parameter aPIKeyUpdateDto: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<APIKeyResponseDto> 
     */
    open class func updateApiKeyWithRequestBuilder(id: UUID, aPIKeyUpdateDto: APIKeyUpdateDto, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<APIKeyResponseDto> {
        var localVariablePath = "/api-keys/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aPIKeyUpdateDto, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIKeyResponseDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}

//
// TimelineAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TimelineAPI {

    /**

     - parameter size: (query)  
     - parameter timeBucket: (query)  
     - parameter albumId: (query)  (optional)
     - parameter isFavorite: (query)  (optional)
     - parameter isTrashed: (query)  (optional)
     - parameter key: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter personId: (query)  (optional)
     - parameter tagId: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter withPartners: (query)  (optional)
     - parameter withStacked: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [AssetResponseDto]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTimeBucket(size: TimeBucketSize, timeBucket: String, albumId: UUID? = nil, isFavorite: Bool? = nil, isTrashed: Bool? = nil, key: String? = nil, order: AssetOrder? = nil, personId: UUID? = nil, tagId: UUID? = nil, userId: UUID? = nil, visibility: AssetVisibility? = nil, withPartners: Bool? = nil, withStacked: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> [AssetResponseDto] {
        return try await getTimeBucketWithRequestBuilder(size: size, timeBucket: timeBucket, albumId: albumId, isFavorite: isFavorite, isTrashed: isTrashed, key: key, order: order, personId: personId, tagId: tagId, userId: userId, visibility: visibility, withPartners: withPartners, withStacked: withStacked, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /timeline/bucket
     - API Key:
       - type: apiKey immich_access_token 
       - name: cookie
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: api_key
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter size: (query)  
     - parameter timeBucket: (query)  
     - parameter albumId: (query)  (optional)
     - parameter isFavorite: (query)  (optional)
     - parameter isTrashed: (query)  (optional)
     - parameter key: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter personId: (query)  (optional)
     - parameter tagId: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter withPartners: (query)  (optional)
     - parameter withStacked: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[AssetResponseDto]> 
     */
    open class func getTimeBucketWithRequestBuilder(size: TimeBucketSize, timeBucket: String, albumId: UUID? = nil, isFavorite: Bool? = nil, isTrashed: Bool? = nil, key: String? = nil, order: AssetOrder? = nil, personId: UUID? = nil, tagId: UUID? = nil, userId: UUID? = nil, visibility: AssetVisibility? = nil, withPartners: Bool? = nil, withStacked: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<[AssetResponseDto]> {
        let localVariablePath = "/timeline/bucket"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "albumId": (wrappedValue: albumId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isFavorite": (wrappedValue: isFavorite?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isTrashed": (wrappedValue: isTrashed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "key": (wrappedValue: key?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "order": (wrappedValue: order?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "personId": (wrappedValue: personId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "tagId": (wrappedValue: tagId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "timeBucket": (wrappedValue: timeBucket.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "userId": (wrappedValue: userId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "visibility": (wrappedValue: visibility?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "withPartners": (wrappedValue: withPartners?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "withStacked": (wrappedValue: withStacked?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetResponseDto]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter size: (query)  
     - parameter albumId: (query)  (optional)
     - parameter isFavorite: (query)  (optional)
     - parameter isTrashed: (query)  (optional)
     - parameter key: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter personId: (query)  (optional)
     - parameter tagId: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter withPartners: (query)  (optional)
     - parameter withStacked: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TimeBucketResponseDto]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTimeBuckets(size: TimeBucketSize, albumId: UUID? = nil, isFavorite: Bool? = nil, isTrashed: Bool? = nil, key: String? = nil, order: AssetOrder? = nil, personId: UUID? = nil, tagId: UUID? = nil, userId: UUID? = nil, visibility: AssetVisibility? = nil, withPartners: Bool? = nil, withStacked: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TimeBucketResponseDto] {
        return try await getTimeBucketsWithRequestBuilder(size: size, albumId: albumId, isFavorite: isFavorite, isTrashed: isTrashed, key: key, order: order, personId: personId, tagId: tagId, userId: userId, visibility: visibility, withPartners: withPartners, withStacked: withStacked, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /timeline/buckets
     - API Key:
       - type: apiKey immich_access_token 
       - name: cookie
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: api_key
     - Bearer Token:
       - type: http
       - name: bearer
     - parameter size: (query)  
     - parameter albumId: (query)  (optional)
     - parameter isFavorite: (query)  (optional)
     - parameter isTrashed: (query)  (optional)
     - parameter key: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter personId: (query)  (optional)
     - parameter tagId: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter withPartners: (query)  (optional)
     - parameter withStacked: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TimeBucketResponseDto]> 
     */
    open class func getTimeBucketsWithRequestBuilder(size: TimeBucketSize, albumId: UUID? = nil, isFavorite: Bool? = nil, isTrashed: Bool? = nil, key: String? = nil, order: AssetOrder? = nil, personId: UUID? = nil, tagId: UUID? = nil, userId: UUID? = nil, visibility: AssetVisibility? = nil, withPartners: Bool? = nil, withStacked: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<[TimeBucketResponseDto]> {
        let localVariablePath = "/timeline/buckets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "albumId": (wrappedValue: albumId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isFavorite": (wrappedValue: isFavorite?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "isTrashed": (wrappedValue: isTrashed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "key": (wrappedValue: key?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "order": (wrappedValue: order?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "personId": (wrappedValue: personId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "tagId": (wrappedValue: tagId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "userId": (wrappedValue: userId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "visibility": (wrappedValue: visibility?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "withPartners": (wrappedValue: withPartners?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "withStacked": (wrappedValue: withStacked?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TimeBucketResponseDto]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}

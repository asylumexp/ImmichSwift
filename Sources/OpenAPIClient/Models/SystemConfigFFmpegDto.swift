//
// SystemConfigFFmpegDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SystemConfigFFmpegDto: Sendable, Codable, ParameterConvertible, Hashable {

    public static let bframesRule = NumericRule<Int>(minimum: -1, exclusiveMinimum: false, maximum: 16, exclusiveMaximum: false, multipleOf: nil)
    public static let crfRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 51, exclusiveMaximum: false, multipleOf: nil)
    public static let gopSizeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let refsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 6, exclusiveMaximum: false, multipleOf: nil)
    public static let threadsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var accel: TranscodeHWAccel
    public var accelDecode: Bool
    public var acceptedAudioCodecs: [AudioCodec]
    public var acceptedContainers: [VideoContainer]
    public var acceptedVideoCodecs: [VideoCodec]
    public var bframes: Int
    public var cqMode: CQMode
    public var crf: Int
    public var gopSize: Int
    public var maxBitrate: String
    public var preferredHwDevice: String
    public var preset: String
    public var refs: Int
    public var targetAudioCodec: AudioCodec
    public var targetResolution: String
    public var targetVideoCodec: VideoCodec
    public var temporalAQ: Bool
    public var threads: Int
    public var tonemap: ToneMapping
    public var transcode: TranscodePolicy
    public var twoPass: Bool

    public init(accel: TranscodeHWAccel, accelDecode: Bool, acceptedAudioCodecs: [AudioCodec], acceptedContainers: [VideoContainer], acceptedVideoCodecs: [VideoCodec], bframes: Int, cqMode: CQMode, crf: Int, gopSize: Int, maxBitrate: String, preferredHwDevice: String, preset: String, refs: Int, targetAudioCodec: AudioCodec, targetResolution: String, targetVideoCodec: VideoCodec, temporalAQ: Bool, threads: Int, tonemap: ToneMapping, transcode: TranscodePolicy, twoPass: Bool) {
        self.accel = accel
        self.accelDecode = accelDecode
        self.acceptedAudioCodecs = acceptedAudioCodecs
        self.acceptedContainers = acceptedContainers
        self.acceptedVideoCodecs = acceptedVideoCodecs
        self.bframes = bframes
        self.cqMode = cqMode
        self.crf = crf
        self.gopSize = gopSize
        self.maxBitrate = maxBitrate
        self.preferredHwDevice = preferredHwDevice
        self.preset = preset
        self.refs = refs
        self.targetAudioCodec = targetAudioCodec
        self.targetResolution = targetResolution
        self.targetVideoCodec = targetVideoCodec
        self.temporalAQ = temporalAQ
        self.threads = threads
        self.tonemap = tonemap
        self.transcode = transcode
        self.twoPass = twoPass
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accel
        case accelDecode
        case acceptedAudioCodecs
        case acceptedContainers
        case acceptedVideoCodecs
        case bframes
        case cqMode
        case crf
        case gopSize
        case maxBitrate
        case preferredHwDevice
        case preset
        case refs
        case targetAudioCodec
        case targetResolution
        case targetVideoCodec
        case temporalAQ
        case threads
        case tonemap
        case transcode
        case twoPass
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accel, forKey: .accel)
        try container.encode(accelDecode, forKey: .accelDecode)
        try container.encode(acceptedAudioCodecs, forKey: .acceptedAudioCodecs)
        try container.encode(acceptedContainers, forKey: .acceptedContainers)
        try container.encode(acceptedVideoCodecs, forKey: .acceptedVideoCodecs)
        try container.encode(bframes, forKey: .bframes)
        try container.encode(cqMode, forKey: .cqMode)
        try container.encode(crf, forKey: .crf)
        try container.encode(gopSize, forKey: .gopSize)
        try container.encode(maxBitrate, forKey: .maxBitrate)
        try container.encode(preferredHwDevice, forKey: .preferredHwDevice)
        try container.encode(preset, forKey: .preset)
        try container.encode(refs, forKey: .refs)
        try container.encode(targetAudioCodec, forKey: .targetAudioCodec)
        try container.encode(targetResolution, forKey: .targetResolution)
        try container.encode(targetVideoCodec, forKey: .targetVideoCodec)
        try container.encode(temporalAQ, forKey: .temporalAQ)
        try container.encode(threads, forKey: .threads)
        try container.encode(tonemap, forKey: .tonemap)
        try container.encode(transcode, forKey: .transcode)
        try container.encode(twoPass, forKey: .twoPass)
    }
}


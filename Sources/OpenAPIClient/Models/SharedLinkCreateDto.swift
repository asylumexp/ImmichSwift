//
// SharedLinkCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SharedLinkCreateDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var albumId: UUID?
    public var allowDownload: Bool? = true
    public var allowUpload: Bool?
    public var assetIds: [UUID]?
    public var description: String?
    public var expiresAt: Date?
    public var password: String?
    public var showMetadata: Bool? = true
    public var type: SharedLinkType

    public init(albumId: UUID? = nil, allowDownload: Bool? = true, allowUpload: Bool? = nil, assetIds: [UUID]? = nil, description: String? = nil, expiresAt: Date? = nil, password: String? = nil, showMetadata: Bool? = true, type: SharedLinkType) {
        self.albumId = albumId
        self.allowDownload = allowDownload
        self.allowUpload = allowUpload
        self.assetIds = assetIds
        self.description = description
        self.expiresAt = expiresAt
        self.password = password
        self.showMetadata = showMetadata
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case albumId
        case allowDownload
        case allowUpload
        case assetIds
        case description
        case expiresAt
        case password
        case showMetadata
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(albumId, forKey: .albumId)
        try container.encodeIfPresent(allowDownload, forKey: .allowDownload)
        try container.encodeIfPresent(allowUpload, forKey: .allowUpload)
        try container.encodeIfPresent(assetIds, forKey: .assetIds)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(showMetadata, forKey: .showMetadata)
        try container.encode(type, forKey: .type)
    }
}


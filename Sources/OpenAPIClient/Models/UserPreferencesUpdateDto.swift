//
// UserPreferencesUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UserPreferencesUpdateDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var avatar: AvatarUpdate?
    public var download: DownloadUpdate?
    public var emailNotifications: EmailNotificationsUpdate?
    public var folders: FoldersUpdate?
    public var memories: MemoriesUpdate?
    public var people: PeopleUpdate?
    public var purchase: PurchaseUpdate?
    public var ratings: RatingsUpdate?
    public var sharedLinks: SharedLinksUpdate?
    public var tags: TagsUpdate?

    public init(avatar: AvatarUpdate? = nil, download: DownloadUpdate? = nil, emailNotifications: EmailNotificationsUpdate? = nil, folders: FoldersUpdate? = nil, memories: MemoriesUpdate? = nil, people: PeopleUpdate? = nil, purchase: PurchaseUpdate? = nil, ratings: RatingsUpdate? = nil, sharedLinks: SharedLinksUpdate? = nil, tags: TagsUpdate? = nil) {
        self.avatar = avatar
        self.download = download
        self.emailNotifications = emailNotifications
        self.folders = folders
        self.memories = memories
        self.people = people
        self.purchase = purchase
        self.ratings = ratings
        self.sharedLinks = sharedLinks
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case avatar
        case download
        case emailNotifications
        case folders
        case memories
        case people
        case purchase
        case ratings
        case sharedLinks
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(download, forKey: .download)
        try container.encodeIfPresent(emailNotifications, forKey: .emailNotifications)
        try container.encodeIfPresent(folders, forKey: .folders)
        try container.encodeIfPresent(memories, forKey: .memories)
        try container.encodeIfPresent(people, forKey: .people)
        try container.encodeIfPresent(purchase, forKey: .purchase)
        try container.encodeIfPresent(ratings, forKey: .ratings)
        try container.encodeIfPresent(sharedLinks, forKey: .sharedLinks)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}


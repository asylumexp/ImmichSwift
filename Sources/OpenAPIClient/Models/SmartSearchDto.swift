//
// SmartSearchDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SmartSearchDto: Sendable, Codable, ParameterConvertible, Hashable {

    public static let pageRule = NumericRule<Double>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let ratingRule = NumericRule<Double>(minimum: -1, exclusiveMinimum: false, maximum: 5, exclusiveMaximum: false, multipleOf: nil)
    public static let sizeRule = NumericRule<Double>(minimum: 1, exclusiveMinimum: false, maximum: 1000, exclusiveMaximum: false, multipleOf: nil)
    public var city: String?
    public var country: String?
    public var createdAfter: Date?
    public var createdBefore: Date?
    public var deviceId: String?
    public var isEncoded: Bool?
    public var isFavorite: Bool?
    public var isMotion: Bool?
    public var isNotInAlbum: Bool?
    public var isOffline: Bool?
    public var language: String?
    public var lensModel: String?
    public var libraryId: UUID?
    public var make: String?
    public var model: String?
    public var page: Double?
    public var personIds: [UUID]?
    public var query: String
    public var rating: Double?
    public var size: Double?
    public var state: String?
    public var tagIds: [UUID]?
    public var takenAfter: Date?
    public var takenBefore: Date?
    public var trashedAfter: Date?
    public var trashedBefore: Date?
    public var type: AssetTypeEnum?
    public var updatedAfter: Date?
    public var updatedBefore: Date?
    public var visibility: AssetVisibility?
    public var withDeleted: Bool?
    public var withExif: Bool?

    public init(city: String? = nil, country: String? = nil, createdAfter: Date? = nil, createdBefore: Date? = nil, deviceId: String? = nil, isEncoded: Bool? = nil, isFavorite: Bool? = nil, isMotion: Bool? = nil, isNotInAlbum: Bool? = nil, isOffline: Bool? = nil, language: String? = nil, lensModel: String? = nil, libraryId: UUID? = nil, make: String? = nil, model: String? = nil, page: Double? = nil, personIds: [UUID]? = nil, query: String, rating: Double? = nil, size: Double? = nil, state: String? = nil, tagIds: [UUID]? = nil, takenAfter: Date? = nil, takenBefore: Date? = nil, trashedAfter: Date? = nil, trashedBefore: Date? = nil, type: AssetTypeEnum? = nil, updatedAfter: Date? = nil, updatedBefore: Date? = nil, visibility: AssetVisibility? = nil, withDeleted: Bool? = nil, withExif: Bool? = nil) {
        self.city = city
        self.country = country
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.deviceId = deviceId
        self.isEncoded = isEncoded
        self.isFavorite = isFavorite
        self.isMotion = isMotion
        self.isNotInAlbum = isNotInAlbum
        self.isOffline = isOffline
        self.language = language
        self.lensModel = lensModel
        self.libraryId = libraryId
        self.make = make
        self.model = model
        self.page = page
        self.personIds = personIds
        self.query = query
        self.rating = rating
        self.size = size
        self.state = state
        self.tagIds = tagIds
        self.takenAfter = takenAfter
        self.takenBefore = takenBefore
        self.trashedAfter = trashedAfter
        self.trashedBefore = trashedBefore
        self.type = type
        self.updatedAfter = updatedAfter
        self.updatedBefore = updatedBefore
        self.visibility = visibility
        self.withDeleted = withDeleted
        self.withExif = withExif
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case country
        case createdAfter
        case createdBefore
        case deviceId
        case isEncoded
        case isFavorite
        case isMotion
        case isNotInAlbum
        case isOffline
        case language
        case lensModel
        case libraryId
        case make
        case model
        case page
        case personIds
        case query
        case rating
        case size
        case state
        case tagIds
        case takenAfter
        case takenBefore
        case trashedAfter
        case trashedBefore
        case type
        case updatedAfter
        case updatedBefore
        case visibility
        case withDeleted
        case withExif
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(createdAfter, forKey: .createdAfter)
        try container.encodeIfPresent(createdBefore, forKey: .createdBefore)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(isEncoded, forKey: .isEncoded)
        try container.encodeIfPresent(isFavorite, forKey: .isFavorite)
        try container.encodeIfPresent(isMotion, forKey: .isMotion)
        try container.encodeIfPresent(isNotInAlbum, forKey: .isNotInAlbum)
        try container.encodeIfPresent(isOffline, forKey: .isOffline)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(lensModel, forKey: .lensModel)
        try container.encodeIfPresent(libraryId, forKey: .libraryId)
        try container.encodeIfPresent(make, forKey: .make)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(page, forKey: .page)
        try container.encodeIfPresent(personIds, forKey: .personIds)
        try container.encode(query, forKey: .query)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(tagIds, forKey: .tagIds)
        try container.encodeIfPresent(takenAfter, forKey: .takenAfter)
        try container.encodeIfPresent(takenBefore, forKey: .takenBefore)
        try container.encodeIfPresent(trashedAfter, forKey: .trashedAfter)
        try container.encodeIfPresent(trashedBefore, forKey: .trashedBefore)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(updatedAfter, forKey: .updatedAfter)
        try container.encodeIfPresent(updatedBefore, forKey: .updatedBefore)
        try container.encodeIfPresent(visibility, forKey: .visibility)
        try container.encodeIfPresent(withDeleted, forKey: .withDeleted)
        try container.encodeIfPresent(withExif, forKey: .withExif)
    }
}


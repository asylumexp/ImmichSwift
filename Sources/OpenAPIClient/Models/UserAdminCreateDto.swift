//
// UserAdminCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UserAdminCreateDto: Sendable, Codable, ParameterConvertible, Hashable {

    public static let quotaSizeInBytesRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var avatarColor: UserAvatarColor?
    public var email: String
    public var name: String
    public var notify: Bool?
    public var password: String
    public var quotaSizeInBytes: Int64?
    public var shouldChangePassword: Bool?
    public var storageLabel: String?

    public init(avatarColor: UserAvatarColor? = nil, email: String, name: String, notify: Bool? = nil, password: String, quotaSizeInBytes: Int64? = nil, shouldChangePassword: Bool? = nil, storageLabel: String? = nil) {
        self.avatarColor = avatarColor
        self.email = email
        self.name = name
        self.notify = notify
        self.password = password
        self.quotaSizeInBytes = quotaSizeInBytes
        self.shouldChangePassword = shouldChangePassword
        self.storageLabel = storageLabel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case avatarColor
        case email
        case name
        case notify
        case password
        case quotaSizeInBytes
        case shouldChangePassword
        case storageLabel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(avatarColor, forKey: .avatarColor)
        try container.encode(email, forKey: .email)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(notify, forKey: .notify)
        try container.encode(password, forKey: .password)
        try container.encodeIfPresent(quotaSizeInBytes, forKey: .quotaSizeInBytes)
        try container.encodeIfPresent(shouldChangePassword, forKey: .shouldChangePassword)
        try container.encodeIfPresent(storageLabel, forKey: .storageLabel)
    }
}


//
// ServerStorageResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ServerStorageResponseDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var diskAvailable: String
    public var diskAvailableRaw: Int64
    public var diskSize: String
    public var diskSizeRaw: Int64
    public var diskUsagePercentage: Double
    public var diskUse: String
    public var diskUseRaw: Int64

    public init(diskAvailable: String, diskAvailableRaw: Int64, diskSize: String, diskSizeRaw: Int64, diskUsagePercentage: Double, diskUse: String, diskUseRaw: Int64) {
        self.diskAvailable = diskAvailable
        self.diskAvailableRaw = diskAvailableRaw
        self.diskSize = diskSize
        self.diskSizeRaw = diskSizeRaw
        self.diskUsagePercentage = diskUsagePercentage
        self.diskUse = diskUse
        self.diskUseRaw = diskUseRaw
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case diskAvailable
        case diskAvailableRaw
        case diskSize
        case diskSizeRaw
        case diskUsagePercentage
        case diskUse
        case diskUseRaw
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(diskAvailable, forKey: .diskAvailable)
        try container.encode(diskAvailableRaw, forKey: .diskAvailableRaw)
        try container.encode(diskSize, forKey: .diskSize)
        try container.encode(diskSizeRaw, forKey: .diskSizeRaw)
        try container.encode(diskUsagePercentage, forKey: .diskUsagePercentage)
        try container.encode(diskUse, forKey: .diskUse)
        try container.encode(diskUseRaw, forKey: .diskUseRaw)
    }
}


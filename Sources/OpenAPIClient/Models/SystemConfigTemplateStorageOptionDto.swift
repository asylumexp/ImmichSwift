//
// SystemConfigTemplateStorageOptionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SystemConfigTemplateStorageOptionDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var dayOptions: [String]
    public var hourOptions: [String]
    public var minuteOptions: [String]
    public var monthOptions: [String]
    public var presetOptions: [String]
    public var secondOptions: [String]
    public var weekOptions: [String]
    public var yearOptions: [String]

    public init(dayOptions: [String], hourOptions: [String], minuteOptions: [String], monthOptions: [String], presetOptions: [String], secondOptions: [String], weekOptions: [String], yearOptions: [String]) {
        self.dayOptions = dayOptions
        self.hourOptions = hourOptions
        self.minuteOptions = minuteOptions
        self.monthOptions = monthOptions
        self.presetOptions = presetOptions
        self.secondOptions = secondOptions
        self.weekOptions = weekOptions
        self.yearOptions = yearOptions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dayOptions
        case hourOptions
        case minuteOptions
        case monthOptions
        case presetOptions
        case secondOptions
        case weekOptions
        case yearOptions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(dayOptions, forKey: .dayOptions)
        try container.encode(hourOptions, forKey: .hourOptions)
        try container.encode(minuteOptions, forKey: .minuteOptions)
        try container.encode(monthOptions, forKey: .monthOptions)
        try container.encode(presetOptions, forKey: .presetOptions)
        try container.encode(secondOptions, forKey: .secondOptions)
        try container.encode(weekOptions, forKey: .weekOptions)
        try container.encode(yearOptions, forKey: .yearOptions)
    }
}


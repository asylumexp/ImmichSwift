//
// ServerAboutResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ServerAboutResponseDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var build: String?
    public var buildImage: String?
    public var buildImageUrl: String?
    public var buildUrl: String?
    public var exiftool: String?
    public var ffmpeg: String?
    public var imagemagick: String?
    public var libvips: String?
    public var licensed: Bool
    public var nodejs: String?
    public var repository: String?
    public var repositoryUrl: String?
    public var sourceCommit: String?
    public var sourceRef: String?
    public var sourceUrl: String?
    public var thirdPartyBugFeatureUrl: String?
    public var thirdPartyDocumentationUrl: String?
    public var thirdPartySourceUrl: String?
    public var thirdPartySupportUrl: String?
    public var version: String
    public var versionUrl: String

    public init(build: String? = nil, buildImage: String? = nil, buildImageUrl: String? = nil, buildUrl: String? = nil, exiftool: String? = nil, ffmpeg: String? = nil, imagemagick: String? = nil, libvips: String? = nil, licensed: Bool, nodejs: String? = nil, repository: String? = nil, repositoryUrl: String? = nil, sourceCommit: String? = nil, sourceRef: String? = nil, sourceUrl: String? = nil, thirdPartyBugFeatureUrl: String? = nil, thirdPartyDocumentationUrl: String? = nil, thirdPartySourceUrl: String? = nil, thirdPartySupportUrl: String? = nil, version: String, versionUrl: String) {
        self.build = build
        self.buildImage = buildImage
        self.buildImageUrl = buildImageUrl
        self.buildUrl = buildUrl
        self.exiftool = exiftool
        self.ffmpeg = ffmpeg
        self.imagemagick = imagemagick
        self.libvips = libvips
        self.licensed = licensed
        self.nodejs = nodejs
        self.repository = repository
        self.repositoryUrl = repositoryUrl
        self.sourceCommit = sourceCommit
        self.sourceRef = sourceRef
        self.sourceUrl = sourceUrl
        self.thirdPartyBugFeatureUrl = thirdPartyBugFeatureUrl
        self.thirdPartyDocumentationUrl = thirdPartyDocumentationUrl
        self.thirdPartySourceUrl = thirdPartySourceUrl
        self.thirdPartySupportUrl = thirdPartySupportUrl
        self.version = version
        self.versionUrl = versionUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case build
        case buildImage
        case buildImageUrl
        case buildUrl
        case exiftool
        case ffmpeg
        case imagemagick
        case libvips
        case licensed
        case nodejs
        case repository
        case repositoryUrl
        case sourceCommit
        case sourceRef
        case sourceUrl
        case thirdPartyBugFeatureUrl
        case thirdPartyDocumentationUrl
        case thirdPartySourceUrl
        case thirdPartySupportUrl
        case version
        case versionUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(buildImage, forKey: .buildImage)
        try container.encodeIfPresent(buildImageUrl, forKey: .buildImageUrl)
        try container.encodeIfPresent(buildUrl, forKey: .buildUrl)
        try container.encodeIfPresent(exiftool, forKey: .exiftool)
        try container.encodeIfPresent(ffmpeg, forKey: .ffmpeg)
        try container.encodeIfPresent(imagemagick, forKey: .imagemagick)
        try container.encodeIfPresent(libvips, forKey: .libvips)
        try container.encode(licensed, forKey: .licensed)
        try container.encodeIfPresent(nodejs, forKey: .nodejs)
        try container.encodeIfPresent(repository, forKey: .repository)
        try container.encodeIfPresent(repositoryUrl, forKey: .repositoryUrl)
        try container.encodeIfPresent(sourceCommit, forKey: .sourceCommit)
        try container.encodeIfPresent(sourceRef, forKey: .sourceRef)
        try container.encodeIfPresent(sourceUrl, forKey: .sourceUrl)
        try container.encodeIfPresent(thirdPartyBugFeatureUrl, forKey: .thirdPartyBugFeatureUrl)
        try container.encodeIfPresent(thirdPartyDocumentationUrl, forKey: .thirdPartyDocumentationUrl)
        try container.encodeIfPresent(thirdPartySourceUrl, forKey: .thirdPartySourceUrl)
        try container.encodeIfPresent(thirdPartySupportUrl, forKey: .thirdPartySupportUrl)
        try container.encode(version, forKey: .version)
        try container.encode(versionUrl, forKey: .versionUrl)
    }
}


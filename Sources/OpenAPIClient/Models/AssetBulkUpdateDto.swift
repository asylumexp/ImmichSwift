//
// AssetBulkUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AssetBulkUpdateDto: Sendable, Codable, ParameterConvertible, Hashable {

    public static let ratingRule = NumericRule<Double>(minimum: -1, exclusiveMinimum: false, maximum: 5, exclusiveMaximum: false, multipleOf: nil)
    public var dateTimeOriginal: String?
    public var duplicateId: String?
    public var ids: [UUID]
    public var isFavorite: Bool?
    public var latitude: Double?
    public var longitude: Double?
    public var rating: Double?
    public var visibility: AssetVisibility?

    public init(dateTimeOriginal: String? = nil, duplicateId: String? = nil, ids: [UUID], isFavorite: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, rating: Double? = nil, visibility: AssetVisibility? = nil) {
        self.dateTimeOriginal = dateTimeOriginal
        self.duplicateId = duplicateId
        self.ids = ids
        self.isFavorite = isFavorite
        self.latitude = latitude
        self.longitude = longitude
        self.rating = rating
        self.visibility = visibility
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateTimeOriginal
        case duplicateId
        case ids
        case isFavorite
        case latitude
        case longitude
        case rating
        case visibility
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dateTimeOriginal, forKey: .dateTimeOriginal)
        try container.encodeIfPresent(duplicateId, forKey: .duplicateId)
        try container.encode(ids, forKey: .ids)
        try container.encodeIfPresent(isFavorite, forKey: .isFavorite)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(visibility, forKey: .visibility)
    }
}


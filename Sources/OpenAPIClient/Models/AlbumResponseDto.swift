//
// AlbumResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AlbumResponseDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var albumName: String
    public var albumThumbnailAssetId: String?
    public var albumUsers: [AlbumUserResponseDto]
    public var assetCount: Int
    public var assets: [AssetResponseDto]
    public var createdAt: Date
    public var description: String
    public var endDate: Date?
    public var hasSharedLink: Bool
    public var id: String
    public var isActivityEnabled: Bool
    public var lastModifiedAssetTimestamp: Date?
    public var order: AssetOrder?
    public var owner: UserResponseDto
    public var ownerId: String
    public var shared: Bool
    public var startDate: Date?
    public var updatedAt: Date

    public init(albumName: String, albumThumbnailAssetId: String?, albumUsers: [AlbumUserResponseDto], assetCount: Int, assets: [AssetResponseDto], createdAt: Date, description: String, endDate: Date? = nil, hasSharedLink: Bool, id: String, isActivityEnabled: Bool, lastModifiedAssetTimestamp: Date? = nil, order: AssetOrder? = nil, owner: UserResponseDto, ownerId: String, shared: Bool, startDate: Date? = nil, updatedAt: Date) {
        self.albumName = albumName
        self.albumThumbnailAssetId = albumThumbnailAssetId
        self.albumUsers = albumUsers
        self.assetCount = assetCount
        self.assets = assets
        self.createdAt = createdAt
        self.description = description
        self.endDate = endDate
        self.hasSharedLink = hasSharedLink
        self.id = id
        self.isActivityEnabled = isActivityEnabled
        self.lastModifiedAssetTimestamp = lastModifiedAssetTimestamp
        self.order = order
        self.owner = owner
        self.ownerId = ownerId
        self.shared = shared
        self.startDate = startDate
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case albumName
        case albumThumbnailAssetId
        case albumUsers
        case assetCount
        case assets
        case createdAt
        case description
        case endDate
        case hasSharedLink
        case id
        case isActivityEnabled
        case lastModifiedAssetTimestamp
        case order
        case owner
        case ownerId
        case shared
        case startDate
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(albumName, forKey: .albumName)
        try container.encode(albumThumbnailAssetId, forKey: .albumThumbnailAssetId)
        try container.encode(albumUsers, forKey: .albumUsers)
        try container.encode(assetCount, forKey: .assetCount)
        try container.encode(assets, forKey: .assets)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encode(hasSharedLink, forKey: .hasSharedLink)
        try container.encode(id, forKey: .id)
        try container.encode(isActivityEnabled, forKey: .isActivityEnabled)
        try container.encodeIfPresent(lastModifiedAssetTimestamp, forKey: .lastModifiedAssetTimestamp)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encode(owner, forKey: .owner)
        try container.encode(ownerId, forKey: .ownerId)
        try container.encode(shared, forKey: .shared)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AlbumResponseDto: Identifiable {}

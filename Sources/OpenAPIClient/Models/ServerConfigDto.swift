//
// ServerConfigDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ServerConfigDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var externalDomain: String
    public var isInitialized: Bool
    public var isOnboarded: Bool
    public var loginPageMessage: String
    public var mapDarkStyleUrl: String
    public var mapLightStyleUrl: String
    public var oauthButtonText: String
    public var publicUsers: Bool
    public var trashDays: Int
    public var userDeleteDelay: Int

    public init(externalDomain: String, isInitialized: Bool, isOnboarded: Bool, loginPageMessage: String, mapDarkStyleUrl: String, mapLightStyleUrl: String, oauthButtonText: String, publicUsers: Bool, trashDays: Int, userDeleteDelay: Int) {
        self.externalDomain = externalDomain
        self.isInitialized = isInitialized
        self.isOnboarded = isOnboarded
        self.loginPageMessage = loginPageMessage
        self.mapDarkStyleUrl = mapDarkStyleUrl
        self.mapLightStyleUrl = mapLightStyleUrl
        self.oauthButtonText = oauthButtonText
        self.publicUsers = publicUsers
        self.trashDays = trashDays
        self.userDeleteDelay = userDeleteDelay
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case externalDomain
        case isInitialized
        case isOnboarded
        case loginPageMessage
        case mapDarkStyleUrl
        case mapLightStyleUrl
        case oauthButtonText
        case publicUsers
        case trashDays
        case userDeleteDelay
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(externalDomain, forKey: .externalDomain)
        try container.encode(isInitialized, forKey: .isInitialized)
        try container.encode(isOnboarded, forKey: .isOnboarded)
        try container.encode(loginPageMessage, forKey: .loginPageMessage)
        try container.encode(mapDarkStyleUrl, forKey: .mapDarkStyleUrl)
        try container.encode(mapLightStyleUrl, forKey: .mapLightStyleUrl)
        try container.encode(oauthButtonText, forKey: .oauthButtonText)
        try container.encode(publicUsers, forKey: .publicUsers)
        try container.encode(trashDays, forKey: .trashDays)
        try container.encode(userDeleteDelay, forKey: .userDeleteDelay)
    }
}


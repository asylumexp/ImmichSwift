//
// AssetFaceWithoutPersonResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AssetFaceWithoutPersonResponseDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var boundingBoxX1: Int
    public var boundingBoxX2: Int
    public var boundingBoxY1: Int
    public var boundingBoxY2: Int
    public var id: UUID
    public var imageHeight: Int
    public var imageWidth: Int
    public var sourceType: SourceType?

    public init(boundingBoxX1: Int, boundingBoxX2: Int, boundingBoxY1: Int, boundingBoxY2: Int, id: UUID, imageHeight: Int, imageWidth: Int, sourceType: SourceType? = nil) {
        self.boundingBoxX1 = boundingBoxX1
        self.boundingBoxX2 = boundingBoxX2
        self.boundingBoxY1 = boundingBoxY1
        self.boundingBoxY2 = boundingBoxY2
        self.id = id
        self.imageHeight = imageHeight
        self.imageWidth = imageWidth
        self.sourceType = sourceType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case boundingBoxX1
        case boundingBoxX2
        case boundingBoxY1
        case boundingBoxY2
        case id
        case imageHeight
        case imageWidth
        case sourceType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(boundingBoxX1, forKey: .boundingBoxX1)
        try container.encode(boundingBoxX2, forKey: .boundingBoxX2)
        try container.encode(boundingBoxY1, forKey: .boundingBoxY1)
        try container.encode(boundingBoxY2, forKey: .boundingBoxY2)
        try container.encode(id, forKey: .id)
        try container.encode(imageHeight, forKey: .imageHeight)
        try container.encode(imageWidth, forKey: .imageWidth)
        try container.encodeIfPresent(sourceType, forKey: .sourceType)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AssetFaceWithoutPersonResponseDto: Identifiable {}

//
// SystemConfigDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SystemConfigDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var backup: SystemConfigBackupsDto
    public var ffmpeg: SystemConfigFFmpegDto
    public var image: SystemConfigImageDto
    public var job: SystemConfigJobDto
    public var library: SystemConfigLibraryDto
    public var logging: SystemConfigLoggingDto
    public var machineLearning: SystemConfigMachineLearningDto
    public var map: SystemConfigMapDto
    public var metadata: SystemConfigMetadataDto
    public var newVersionCheck: SystemConfigNewVersionCheckDto
    public var notifications: SystemConfigNotificationsDto
    public var oauth: SystemConfigOAuthDto
    public var passwordLogin: SystemConfigPasswordLoginDto
    public var reverseGeocoding: SystemConfigReverseGeocodingDto
    public var server: SystemConfigServerDto
    public var storageTemplate: SystemConfigStorageTemplateDto
    public var templates: SystemConfigTemplatesDto
    public var theme: SystemConfigThemeDto
    public var trash: SystemConfigTrashDto
    public var user: SystemConfigUserDto

    public init(backup: SystemConfigBackupsDto, ffmpeg: SystemConfigFFmpegDto, image: SystemConfigImageDto, job: SystemConfigJobDto, library: SystemConfigLibraryDto, logging: SystemConfigLoggingDto, machineLearning: SystemConfigMachineLearningDto, map: SystemConfigMapDto, metadata: SystemConfigMetadataDto, newVersionCheck: SystemConfigNewVersionCheckDto, notifications: SystemConfigNotificationsDto, oauth: SystemConfigOAuthDto, passwordLogin: SystemConfigPasswordLoginDto, reverseGeocoding: SystemConfigReverseGeocodingDto, server: SystemConfigServerDto, storageTemplate: SystemConfigStorageTemplateDto, templates: SystemConfigTemplatesDto, theme: SystemConfigThemeDto, trash: SystemConfigTrashDto, user: SystemConfigUserDto) {
        self.backup = backup
        self.ffmpeg = ffmpeg
        self.image = image
        self.job = job
        self.library = library
        self.logging = logging
        self.machineLearning = machineLearning
        self.map = map
        self.metadata = metadata
        self.newVersionCheck = newVersionCheck
        self.notifications = notifications
        self.oauth = oauth
        self.passwordLogin = passwordLogin
        self.reverseGeocoding = reverseGeocoding
        self.server = server
        self.storageTemplate = storageTemplate
        self.templates = templates
        self.theme = theme
        self.trash = trash
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case backup
        case ffmpeg
        case image
        case job
        case library
        case logging
        case machineLearning
        case map
        case metadata
        case newVersionCheck
        case notifications
        case oauth
        case passwordLogin
        case reverseGeocoding
        case server
        case storageTemplate
        case templates
        case theme
        case trash
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(backup, forKey: .backup)
        try container.encode(ffmpeg, forKey: .ffmpeg)
        try container.encode(image, forKey: .image)
        try container.encode(job, forKey: .job)
        try container.encode(library, forKey: .library)
        try container.encode(logging, forKey: .logging)
        try container.encode(machineLearning, forKey: .machineLearning)
        try container.encode(map, forKey: .map)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(newVersionCheck, forKey: .newVersionCheck)
        try container.encode(notifications, forKey: .notifications)
        try container.encode(oauth, forKey: .oauth)
        try container.encode(passwordLogin, forKey: .passwordLogin)
        try container.encode(reverseGeocoding, forKey: .reverseGeocoding)
        try container.encode(server, forKey: .server)
        try container.encode(storageTemplate, forKey: .storageTemplate)
        try container.encode(templates, forKey: .templates)
        try container.encode(theme, forKey: .theme)
        try container.encode(trash, forKey: .trash)
        try container.encode(user, forKey: .user)
    }
}


//
// AssetResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AssetResponseDto: Sendable, Codable, ParameterConvertible, Hashable {

    /** base64 encoded sha1 hash */
    public var checksum: String
    public var deviceAssetId: String
    public var deviceId: String
    public var duplicateId: String?
    public var duration: String
    public var exifInfo: ExifResponseDto?
    public var fileCreatedAt: Date
    public var fileModifiedAt: Date
    public var hasMetadata: Bool
    public var id: String
    public var isArchived: Bool
    public var isFavorite: Bool
    public var isOffline: Bool
    public var isTrashed: Bool
    /** This property was deprecated in v1.106.0 */
    @available(*, deprecated, message: "This property is deprecated.")
    public var libraryId: String?
    public var livePhotoVideoId: String?
    public var localDateTime: Date
    public var originalFileName: String
    public var originalMimeType: String?
    public var originalPath: String
    public var owner: UserResponseDto?
    public var ownerId: String
    public var people: [PersonWithFacesResponseDto]?
    /** This property was deprecated in v1.113.0 */
    @available(*, deprecated, message: "This property is deprecated.")
    public var resized: Bool?
    public var stack: AssetStackResponseDto?
    public var tags: [TagResponseDto]?
    public var thumbhash: String?
    public var type: AssetTypeEnum
    public var unassignedFaces: [AssetFaceWithoutPersonResponseDto]?
    public var updatedAt: Date

    public init(checksum: String, deviceAssetId: String, deviceId: String, duplicateId: String? = nil, duration: String, exifInfo: ExifResponseDto? = nil, fileCreatedAt: Date, fileModifiedAt: Date, hasMetadata: Bool, id: String, isArchived: Bool, isFavorite: Bool, isOffline: Bool, isTrashed: Bool, libraryId: String? = nil, livePhotoVideoId: String? = nil, localDateTime: Date, originalFileName: String, originalMimeType: String? = nil, originalPath: String, owner: UserResponseDto? = nil, ownerId: String, people: [PersonWithFacesResponseDto]? = nil, resized: Bool? = nil, stack: AssetStackResponseDto? = nil, tags: [TagResponseDto]? = nil, thumbhash: String?, type: AssetTypeEnum, unassignedFaces: [AssetFaceWithoutPersonResponseDto]? = nil, updatedAt: Date) {
        self.checksum = checksum
        self.deviceAssetId = deviceAssetId
        self.deviceId = deviceId
        self.duplicateId = duplicateId
        self.duration = duration
        self.exifInfo = exifInfo
        self.fileCreatedAt = fileCreatedAt
        self.fileModifiedAt = fileModifiedAt
        self.hasMetadata = hasMetadata
        self.id = id
        self.isArchived = isArchived
        self.isFavorite = isFavorite
        self.isOffline = isOffline
        self.isTrashed = isTrashed
        self.libraryId = libraryId
        self.livePhotoVideoId = livePhotoVideoId
        self.localDateTime = localDateTime
        self.originalFileName = originalFileName
        self.originalMimeType = originalMimeType
        self.originalPath = originalPath
        self.owner = owner
        self.ownerId = ownerId
        self.people = people
        self.resized = resized
        self.stack = stack
        self.tags = tags
        self.thumbhash = thumbhash
        self.type = type
        self.unassignedFaces = unassignedFaces
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case checksum
        case deviceAssetId
        case deviceId
        case duplicateId
        case duration
        case exifInfo
        case fileCreatedAt
        case fileModifiedAt
        case hasMetadata
        case id
        case isArchived
        case isFavorite
        case isOffline
        case isTrashed
        case libraryId
        case livePhotoVideoId
        case localDateTime
        case originalFileName
        case originalMimeType
        case originalPath
        case owner
        case ownerId
        case people
        case resized
        case stack
        case tags
        case thumbhash
        case type
        case unassignedFaces
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(checksum, forKey: .checksum)
        try container.encode(deviceAssetId, forKey: .deviceAssetId)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(duplicateId, forKey: .duplicateId)
        try container.encode(duration, forKey: .duration)
        try container.encodeIfPresent(exifInfo, forKey: .exifInfo)
        try container.encode(fileCreatedAt, forKey: .fileCreatedAt)
        try container.encode(fileModifiedAt, forKey: .fileModifiedAt)
        try container.encode(hasMetadata, forKey: .hasMetadata)
        try container.encode(id, forKey: .id)
        try container.encode(isArchived, forKey: .isArchived)
        try container.encode(isFavorite, forKey: .isFavorite)
        try container.encode(isOffline, forKey: .isOffline)
        try container.encode(isTrashed, forKey: .isTrashed)
        try container.encodeIfPresent(libraryId, forKey: .libraryId)
        try container.encodeIfPresent(livePhotoVideoId, forKey: .livePhotoVideoId)
        try container.encode(localDateTime, forKey: .localDateTime)
        try container.encode(originalFileName, forKey: .originalFileName)
        try container.encodeIfPresent(originalMimeType, forKey: .originalMimeType)
        try container.encode(originalPath, forKey: .originalPath)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encode(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(people, forKey: .people)
        try container.encodeIfPresent(resized, forKey: .resized)
        try container.encodeIfPresent(stack, forKey: .stack)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encode(thumbhash, forKey: .thumbhash)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(unassignedFaces, forKey: .unassignedFaces)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AssetResponseDto: Identifiable {}

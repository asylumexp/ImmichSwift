//
// ExifResponseDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ExifResponseDto: Sendable, Codable, ParameterConvertible, Hashable {

    public var city: String?
    public var country: String?
    public var dateTimeOriginal: Date?
    public var description: String?
    public var exifImageHeight: Double?
    public var exifImageWidth: Double?
    public var exposureTime: String?
    public var fNumber: Double?
    public var fileSizeInByte: Int64?
    public var focalLength: Double?
    public var iso: Double?
    public var latitude: Double?
    public var lensModel: String?
    public var longitude: Double?
    public var make: String?
    public var model: String?
    public var modifyDate: Date?
    public var orientation: String?
    public var projectionType: String?
    public var rating: Double?
    public var state: String?
    public var timeZone: String?

    public init(city: String? = nil, country: String? = nil, dateTimeOriginal: Date? = nil, description: String? = nil, exifImageHeight: Double? = nil, exifImageWidth: Double? = nil, exposureTime: String? = nil, fNumber: Double? = nil, fileSizeInByte: Int64? = nil, focalLength: Double? = nil, iso: Double? = nil, latitude: Double? = nil, lensModel: String? = nil, longitude: Double? = nil, make: String? = nil, model: String? = nil, modifyDate: Date? = nil, orientation: String? = nil, projectionType: String? = nil, rating: Double? = nil, state: String? = nil, timeZone: String? = nil) {
        self.city = city
        self.country = country
        self.dateTimeOriginal = dateTimeOriginal
        self.description = description
        self.exifImageHeight = exifImageHeight
        self.exifImageWidth = exifImageWidth
        self.exposureTime = exposureTime
        self.fNumber = fNumber
        self.fileSizeInByte = fileSizeInByte
        self.focalLength = focalLength
        self.iso = iso
        self.latitude = latitude
        self.lensModel = lensModel
        self.longitude = longitude
        self.make = make
        self.model = model
        self.modifyDate = modifyDate
        self.orientation = orientation
        self.projectionType = projectionType
        self.rating = rating
        self.state = state
        self.timeZone = timeZone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case country
        case dateTimeOriginal
        case description
        case exifImageHeight
        case exifImageWidth
        case exposureTime
        case fNumber
        case fileSizeInByte
        case focalLength
        case iso
        case latitude
        case lensModel
        case longitude
        case make
        case model
        case modifyDate
        case orientation
        case projectionType
        case rating
        case state
        case timeZone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(dateTimeOriginal, forKey: .dateTimeOriginal)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(exifImageHeight, forKey: .exifImageHeight)
        try container.encodeIfPresent(exifImageWidth, forKey: .exifImageWidth)
        try container.encodeIfPresent(exposureTime, forKey: .exposureTime)
        try container.encodeIfPresent(fNumber, forKey: .fNumber)
        try container.encodeIfPresent(fileSizeInByte, forKey: .fileSizeInByte)
        try container.encodeIfPresent(focalLength, forKey: .focalLength)
        try container.encodeIfPresent(iso, forKey: .iso)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(lensModel, forKey: .lensModel)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(make, forKey: .make)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(modifyDate, forKey: .modifyDate)
        try container.encodeIfPresent(orientation, forKey: .orientation)
        try container.encodeIfPresent(projectionType, forKey: .projectionType)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
    }
}

